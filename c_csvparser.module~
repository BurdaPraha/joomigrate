<?php

/**
 * implements hook_menu()
 * @return items array of my menu
 */
function c_csvparser_menu() {
  $items = array();

  $items['eck-csv-import'] = array( 
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c_csvparser_form'),
    'access arguments' => array('allow example import'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * My form
 * @return object  Description   
 */
function c_csvparser_form() {
  $form = array();

  $form['browser'] = array(
    '#type'        =>'fieldset',
    '#title'       => t('Browser Upload'),
    '#collapsible' => TRUE,
    '#description' => t("Upload a CSV file."),
  );

  $file_size = t('Maximum file size: !size MB.', array('!size' => file_upload_max_size()));

  $form['browser']['file_upload'] = array(
    '#type'        => 'file',
    '#title'       => t('CSV File'),
    '#size'        => 40,
    '#description' => t('Select the CSV file to be imported. ') . $file_size,
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'),
  );

  // set the form encoding type
  $form['#attributes']['enctype'] = "multipart/form-data";

  return $form;
}

/**
 * validating c_csvparser_form
 */
function c_csvparser_form_validate($form, &$form_state) {
  // Adding csv extension to validators - attempt to save the uploaded file
  $validators = array('file_validate_extensions' => array('csv'));
  $file = file_save_upload('file_upload', $validators);
  
  // check if file uploaded OK
  if (!$file) { 
    form_set_error('file_upload', t('A file must be uploaded or selected from FTP updates.'));
  }
  else if($file->filemime != 'text/csv') {
    form_set_error('file_upload', t('Only CSV file are allowed.'));
  }
  else {
    // set files to form_state, to process when form is submitted
    $form_state['values']['file_upload'] = $file;
  }
}

/**
 * c_csvparser submit callback
 */
function c_csvparser_form_submit($form, &$form_state) {
  $line_max = variable_get('user_import_line_max', 1000);
  ini_set('auto_detect_line_endings', true);
  
  $filepath = $form_state['values']['file_upload']->uri;
  $handle = fopen($filepath, "r");
  
  // start count of imports for this upload
  $send_counter = 0;

  while ($row = fgetcsv($handle, $line_max, ',')) {
    // $row is an array of elements in each row
    // Avoiding the first row because it contain the title.
    if ($send_counter != 0) {
      //Add your function create here
      c_csvparser_entity_create($row, $send_counter);
    }
    $send_counter++;
  }
  drupal_set_message(t('@counter data were successfully uploaded.'));
}

function c_csvparser_entity_create($data, $counter) {
  global $user;
  
  $entity_type = 'coding';
  $entity = entity_create($entity_type, array('type' => 'coding_unit'));
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  
  //Populating properties
  $wrapper->uid = $user->uid;
  $wrapper->title = $data[1] .' - '. $data[0];
  $wrapper->created = $wrapper->changed  = time();
  
  //Field property
  $wrapper->field_unit_code->set((string)$data[1]);
  $wrapper->field_coding_description->set((string)$data[0]);
  
  //And finally we save
  $wrapper->save();
}
